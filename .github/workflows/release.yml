name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            musl: true
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Cache cargo
        uses: swatinem/rust-cache@v2
      - name: Install musl tools
        if: ${{ matrix.musl == true }}
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      - name: Build release
        run: cargo build --release --locked --target ${{ matrix.target }}
      - name: Package tar.gz (Unix)
        if: ${{ runner.os != 'Windows' }}
        run: |
          set -euo pipefail
          TARGET=${{ matrix.target }}
          VERSION=$(sed -n 's/^version = \"\(.*\)\"/\1/p' Cargo.toml | head -n1)
          ARCHIVE="ocloc-${VERSION}-${TARGET}.tar.gz"
          tar -C target/${TARGET}/release -czf "$ARCHIVE" ocloc
          echo "ARCHIVE=$ARCHIVE" >> $GITHUB_ENV
      - name: Package Windows artifact
        if: ${{ runner.os == 'Windows' }}
        shell: bash
        run: |
          set -euo pipefail
          TARGET=${{ matrix.target }}
          VERSION=$(sed -n 's/^version = \"\(.*\)\"/\1/p' Cargo.toml | head -n1)
          ARCHIVE="ocloc-${VERSION}-${TARGET}.zip"
          zip -j "$ARCHIVE" target/${TARGET}/release/ocloc.exe >/dev/null
          echo "ARCHIVE=$ARCHIVE" >> $GITHUB_ENV
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ocloc-${{ matrix.target }}
          path: ${{ env.ARCHIVE }}

  release:
    name: Create Release and Attach Assets
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Compute checksums
        run: |
          set -euo pipefail
          cd dist
          ( command -v sha256sum >/dev/null && sha256sum ocloc-* > SHA256SUMS.txt ) || \
          ( command -v shasum >/dev/null && shasum -a 256 ocloc-* > SHA256SUMS.txt )
          echo "--- SHA256SUMS ---"
          cat SHA256SUMS.txt
      - name: List artifacts
        run: ls -l dist
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            dist/ocloc-*.tar.gz
            dist/ocloc-*.zip
            dist/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew Tap
    needs: release
    runs-on: ubuntu-latest
    if: ${{ secrets.TAP_REPO != '' && secrets.TAP_TOKEN != '' }}
    steps:
      - name: Checkout tap repo
        run: |
          set -e
          git clone https://x-access-token:${{ secrets.TAP_TOKEN }}@github.com/${{ secrets.TAP_REPO }} tap
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Compute checksums
        run: |
          cd dist
          ( command -v sha256sum >/dev/null && sha256sum ocloc-* > SHA256SUMS.txt ) || \
          ( command -v shasum >/dev/null && shasum -a 256 ocloc-* > SHA256SUMS.txt )
          cat SHA256SUMS.txt
      - name: Update formula
        env:
          REPO_SLUG: ${{ github.repository }}
          TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          MAC_ARM_TARBALL=$(ls dist/ocloc-*-aarch64-apple-darwin.tar.gz | xargs -n1 basename)
          MAC_X64_TARBALL=$(ls dist/ocloc-*-x86_64-apple-darwin.tar.gz | xargs -n1 basename)
          LINUX_X64_TARBALL=$(ls dist/ocloc-*-x86_64-unknown-linux-gnu.tar.gz | xargs -n1 basename)
          MAC_ARM_SHA=$(grep "$MAC_ARM_TARBALL" dist/SHA256SUMS.txt | awk '{print $1}')
          MAC_X64_SHA=$(grep "$MAC_X64_TARBALL" dist/SHA256SUMS.txt | awk '{print $1}')
          LINUX_X64_SHA=$(grep "$LINUX_X64_TARBALL" dist/SHA256SUMS.txt | awk '{print $1}')
          VERSION="${TAG#v}"
          FORMULA_DIR="tap/Formula"
          mkdir -p "$FORMULA_DIR"
          cat > "$FORMULA_DIR/ocloc.rb" <<'RUBY'
class Ocloc < Formula
  desc "Fast, reliable lines-of-code counter"
  homepage "https://github.com/$REPO_SLUG"
  version "$VERSION"
  license "MIT"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/$REPO_SLUG/releases/download/$TAG/$MAC_ARM_TARBALL"
      sha256 "$MAC_ARM_SHA"
    else
      url "https://github.com/$REPO_SLUG/releases/download/$TAG/$MAC_X64_TARBALL"
      sha256 "$MAC_X64_SHA"
    end
  end

  on_linux do
    url "https://github.com/$REPO_SLUG/releases/download/$TAG/$LINUX_X64_TARBALL"
    sha256 "$LINUX_X64_SHA"
  end

  def install
    system "tar", "-xzf", Dir["*.tar.gz"].first if Dir["*.tar.gz"].any?
    bin.install "ocloc" => "ocloc"
  end

  test do
    system "#{bin}/ocloc", "--version"
  end
end
RUBY
          cd tap
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add Formula/ocloc.rb
          git commit -m "ocloc $VERSION: update formula"
          git push origin HEAD
